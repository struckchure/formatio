// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIUserService is an autogenerated mock type for the IUserService type
type MockIUserService struct {
	mock.Mock
}

// AuthSocialConnection provides a mock function with given fields: _a0
func (_m *MockIUserService) AuthSocialConnection(_a0 types.Auth0UserArgs) (*types.LoginUserResult, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AuthSocialConnection")
	}

	var r0 *types.LoginUserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Auth0UserArgs) (*types.LoginUserResult, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.Auth0UserArgs) *types.LoginUserResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoginUserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Auth0UserArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileUser provides a mock function with given fields: _a0
func (_m *MockIUserService) GetProfileUser(_a0 types.GetUserArgs) (*db.UserModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileUser")
	}

	var r0 *db.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetUserArgs) (*db.UserModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetUserArgs) *db.UserModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetUserArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: _a0
func (_m *MockIUserService) LoginUser(_a0 types.LoginUserArgs) (*types.LoginUserResult, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *types.LoginUserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(types.LoginUserArgs) (*types.LoginUserResult, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.LoginUserArgs) *types.LoginUserResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoginUserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(types.LoginUserArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAccessToken provides a mock function with given fields: _a0
func (_m *MockIUserService) RefreshAccessToken(_a0 types.RefreshAccessTokenArgs) (*types.LoginUserResult, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAccessToken")
	}

	var r0 *types.LoginUserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(types.RefreshAccessTokenArgs) (*types.LoginUserResult, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.RefreshAccessTokenArgs) *types.LoginUserResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoginUserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(types.RefreshAccessTokenArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0
func (_m *MockIUserService) RegisterUser(_a0 types.RegisterUserArgs) (*types.RegisterUserResult, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *types.RegisterUserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(types.RegisterUserArgs) (*types.RegisterUserResult, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.RegisterUserArgs) *types.RegisterUserResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RegisterUserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(types.RegisterUserArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *MockIUserService) UpdateUser(_a0 types.UpdateUserArgs) (*db.UserModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *db.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateUserArgs) (*db.UserModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateUserArgs) *db.UserModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateUserArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIUserService creates a new instance of MockIUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserService {
	mock := &MockIUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
