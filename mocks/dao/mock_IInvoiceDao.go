// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIInvoiceDao is an autogenerated mock type for the IInvoiceDao type
type MockIInvoiceDao struct {
	mock.Mock
}

// CreateInvoice provides a mock function with given fields: args
func (_m *MockIInvoiceDao) CreateInvoice(args types.CreateInvoiceArgs) (*db.InvoiceModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 *db.InvoiceModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateInvoiceArgs) (*db.InvoiceModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.CreateInvoiceArgs) *db.InvoiceModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.InvoiceModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateInvoiceArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvoice provides a mock function with given fields: args
func (_m *MockIInvoiceDao) DeleteInvoice(args types.DeleteInvoiceArgs) error {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteInvoiceArgs) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInvoice provides a mock function with given fields: args
func (_m *MockIInvoiceDao) GetInvoice(args types.GetInvoiceArgs) (*db.InvoiceModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 *db.InvoiceModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetInvoiceArgs) (*db.InvoiceModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.GetInvoiceArgs) *db.InvoiceModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.InvoiceModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetInvoiceArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastInvoice provides a mock function with given fields: args
func (_m *MockIInvoiceDao) LastInvoice(args types.LastInvoiceArgs) (*db.InvoiceModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for LastInvoice")
	}

	var r0 *db.InvoiceModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.LastInvoiceArgs) (*db.InvoiceModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.LastInvoiceArgs) *db.InvoiceModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.InvoiceModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.LastInvoiceArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvoice provides a mock function with given fields: args
func (_m *MockIInvoiceDao) ListInvoice(args types.ListInvoiceArgs) ([]db.InvoiceModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoice")
	}

	var r0 []db.InvoiceModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListInvoiceArgs) ([]db.InvoiceModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.ListInvoiceArgs) []db.InvoiceModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.InvoiceModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListInvoiceArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvoice provides a mock function with given fields: args
func (_m *MockIInvoiceDao) UpdateInvoice(args types.UpdateInvoiceArgs) (*db.InvoiceModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoice")
	}

	var r0 *db.InvoiceModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateInvoiceArgs) (*db.InvoiceModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateInvoiceArgs) *db.InvoiceModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.InvoiceModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateInvoiceArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIInvoiceDao creates a new instance of MockIInvoiceDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIInvoiceDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIInvoiceDao {
	mock := &MockIInvoiceDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
