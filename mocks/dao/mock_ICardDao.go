// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockICardDao is an autogenerated mock type for the ICardDao type
type MockICardDao struct {
	mock.Mock
}

// CreateCard provides a mock function with given fields: args
func (_m *MockICardDao) CreateCard(args types.CreateCardArgs) (*db.CardModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 *db.CardModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateCardArgs) (*db.CardModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.CreateCardArgs) *db.CardModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.CardModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateCardArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCard provides a mock function with given fields: args
func (_m *MockICardDao) DeleteCard(args types.DeleteCardArgs) error {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteCardArgs) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCard provides a mock function with given fields: args
func (_m *MockICardDao) GetCard(args types.GetCardArgs) (*db.CardModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 *db.CardModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetCardArgs) (*db.CardModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.GetCardArgs) *db.CardModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.CardModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetCardArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCard provides a mock function with given fields: args
func (_m *MockICardDao) ListCard(args types.ListCardArgs) ([]db.CardModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for ListCard")
	}

	var r0 []db.CardModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListCardArgs) ([]db.CardModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.ListCardArgs) []db.CardModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.CardModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListCardArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCard provides a mock function with given fields: args
func (_m *MockICardDao) UpdateCard(args types.UpdateCardArgs) (*db.CardModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 *db.CardModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateCardArgs) (*db.CardModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateCardArgs) *db.CardModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.CardModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateCardArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockICardDao creates a new instance of MockICardDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICardDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICardDao {
	mock := &MockICardDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
