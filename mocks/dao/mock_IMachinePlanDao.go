// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIMachinePlanDao is an autogenerated mock type for the IMachinePlanDao type
type MockIMachinePlanDao struct {
	mock.Mock
}

// CreateMachinePlan provides a mock function with given fields: _a0
func (_m *MockIMachinePlanDao) CreateMachinePlan(_a0 types.CreateMachinePlanArgs) (*db.MachinePlanModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateMachinePlan")
	}

	var r0 *db.MachinePlanModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateMachinePlanArgs) (*db.MachinePlanModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.CreateMachinePlanArgs) *db.MachinePlanModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MachinePlanModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateMachinePlanArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMachinePlan provides a mock function with given fields: _a0
func (_m *MockIMachinePlanDao) DeleteMachinePlan(_a0 types.DeleteMachinePlanArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMachinePlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteMachinePlanArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMachinePlan provides a mock function with given fields: _a0
func (_m *MockIMachinePlanDao) GetMachinePlan(_a0 types.GetMachinePlanArgs) (*db.MachinePlanModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMachinePlan")
	}

	var r0 *db.MachinePlanModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetMachinePlanArgs) (*db.MachinePlanModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetMachinePlanArgs) *db.MachinePlanModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MachinePlanModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetMachinePlanArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMachinePlans provides a mock function with given fields: _a0
func (_m *MockIMachinePlanDao) ListMachinePlans(_a0 types.ListMachinePlansArgs) ([]db.MachinePlanModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListMachinePlans")
	}

	var r0 []db.MachinePlanModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListMachinePlansArgs) ([]db.MachinePlanModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ListMachinePlansArgs) []db.MachinePlanModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.MachinePlanModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListMachinePlansArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMachinePlan provides a mock function with given fields: _a0
func (_m *MockIMachinePlanDao) UpdateMachinePlan(_a0 types.UpdateMachinePlanArgs) (*db.MachinePlanModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMachinePlan")
	}

	var r0 *db.MachinePlanModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateMachinePlanArgs) (*db.MachinePlanModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateMachinePlanArgs) *db.MachinePlanModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MachinePlanModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateMachinePlanArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIMachinePlanDao creates a new instance of MockIMachinePlanDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMachinePlanDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMachinePlanDao {
	mock := &MockIMachinePlanDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
