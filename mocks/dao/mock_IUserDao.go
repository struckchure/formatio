// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIUserDao is an autogenerated mock type for the IUserDao type
type MockIUserDao struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: args
func (_m *MockIUserDao) CreateUser(args types.CreateUserArgs) (*db.UserModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *db.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateUserArgs) (*db.UserModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.CreateUserArgs) *db.UserModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateUserArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: args
func (_m *MockIUserDao) DeleteUser(args types.DeleteUserArgs) error {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteUserArgs) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: args
func (_m *MockIUserDao) GetUser(args types.GetUserArgs) (*db.UserModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *db.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetUserArgs) (*db.UserModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.GetUserArgs) *db.UserModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetUserArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: args
func (_m *MockIUserDao) ListUsers(args types.ListUsersArgs) ([]db.UserModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []db.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListUsersArgs) ([]db.UserModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.ListUsersArgs) []db.UserModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListUsersArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: args
func (_m *MockIUserDao) UpdateUser(args types.UpdateUserArgs) (*db.UserModel, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *db.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateUserArgs) (*db.UserModel, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateUserArgs) *db.UserModel); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateUserArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIUserDao creates a new instance of MockIUserDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserDao {
	mock := &MockIUserDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
