// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIRepoConnectionDao is an autogenerated mock type for the IRepoConnectionDao type
type MockIRepoConnectionDao struct {
	mock.Mock
}

// CreateRepoConnection provides a mock function with given fields: _a0
func (_m *MockIRepoConnectionDao) CreateRepoConnection(_a0 types.CreateRepoConnectionArgs) (*db.RepoConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepoConnection")
	}

	var r0 *db.RepoConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateRepoConnectionArgs) (*db.RepoConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.CreateRepoConnectionArgs) *db.RepoConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RepoConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateRepoConnectionArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepoConnection provides a mock function with given fields: _a0
func (_m *MockIRepoConnectionDao) DeleteRepoConnection(_a0 types.DeleteRepoConnectionArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepoConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteRepoConnectionArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRepoConnection provides a mock function with given fields: _a0
func (_m *MockIRepoConnectionDao) GetRepoConnection(_a0 types.GetRepoConnectionArgs) (*db.RepoConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoConnection")
	}

	var r0 *db.RepoConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetRepoConnectionArgs) (*db.RepoConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetRepoConnectionArgs) *db.RepoConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RepoConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetRepoConnectionArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepoConnections provides a mock function with given fields: _a0
func (_m *MockIRepoConnectionDao) ListRepoConnections(_a0 types.ListRepoConnectionArgs) ([]db.RepoConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListRepoConnections")
	}

	var r0 []db.RepoConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListRepoConnectionArgs) ([]db.RepoConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ListRepoConnectionArgs) []db.RepoConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.RepoConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListRepoConnectionArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepoConnection provides a mock function with given fields: _a0
func (_m *MockIRepoConnectionDao) UpdateRepoConnection(_a0 types.UpdateRepoConnectionArgs) (*db.RepoConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepoConnection")
	}

	var r0 *db.RepoConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateRepoConnectionArgs) (*db.RepoConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateRepoConnectionArgs) *db.RepoConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RepoConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateRepoConnectionArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIRepoConnectionDao creates a new instance of MockIRepoConnectionDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepoConnectionDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepoConnectionDao {
	mock := &MockIRepoConnectionDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
