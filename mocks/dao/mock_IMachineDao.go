// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIMachineDao is an autogenerated mock type for the IMachineDao type
type MockIMachineDao struct {
	mock.Mock
}

// CreateMachine provides a mock function with given fields: _a0
func (_m *MockIMachineDao) CreateMachine(_a0 types.CreateMachineArgs) (*db.MachineModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateMachine")
	}

	var r0 *db.MachineModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateMachineArgs) (*db.MachineModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.CreateMachineArgs) *db.MachineModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MachineModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateMachineArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMachine provides a mock function with given fields: _a0
func (_m *MockIMachineDao) DeleteMachine(_a0 types.DeleteMachineArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMachine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteMachineArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMachine provides a mock function with given fields: _a0
func (_m *MockIMachineDao) GetMachine(_a0 types.GetMachineArgs) (*db.MachineModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMachine")
	}

	var r0 *db.MachineModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetMachineArgs) (*db.MachineModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetMachineArgs) *db.MachineModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MachineModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetMachineArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMachines provides a mock function with given fields: _a0
func (_m *MockIMachineDao) ListMachines(_a0 types.ListMachineArgs) ([]db.MachineModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListMachines")
	}

	var r0 []db.MachineModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListMachineArgs) ([]db.MachineModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ListMachineArgs) []db.MachineModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.MachineModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListMachineArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMachine provides a mock function with given fields: _a0
func (_m *MockIMachineDao) UpdateMachine(_a0 types.UpdateMachineArgs) (*db.MachineModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMachine")
	}

	var r0 *db.MachineModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateMachineArgs) (*db.MachineModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateMachineArgs) *db.MachineModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.MachineModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateMachineArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIMachineDao creates a new instance of MockIMachineDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMachineDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMachineDao {
	mock := &MockIMachineDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
