// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIGithubAccountConnectionDao is an autogenerated mock type for the IGithubAccountConnectionDao type
type MockIGithubAccountConnectionDao struct {
	mock.Mock
}

// CreateConnection provides a mock function with given fields: _a0
func (_m *MockIGithubAccountConnectionDao) CreateConnection(_a0 types.CreateGithubAccountConnectionArgs) (*db.GithubAccountConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 *db.GithubAccountConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateGithubAccountConnectionArgs) (*db.GithubAccountConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.CreateGithubAccountConnectionArgs) *db.GithubAccountConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.GithubAccountConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateGithubAccountConnectionArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: _a0
func (_m *MockIGithubAccountConnectionDao) DeleteConnection(_a0 types.DeleteGithubAccountConnectionsArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteGithubAccountConnectionsArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConnection provides a mock function with given fields: _a0
func (_m *MockIGithubAccountConnectionDao) GetConnection(_a0 types.GetGithubAccountConnectionsArgs) (*db.GithubAccountConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 *db.GithubAccountConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetGithubAccountConnectionsArgs) (*db.GithubAccountConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetGithubAccountConnectionsArgs) *db.GithubAccountConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.GithubAccountConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetGithubAccountConnectionsArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnections provides a mock function with given fields: _a0
func (_m *MockIGithubAccountConnectionDao) ListConnections(_a0 types.ListGithubAccountConnectionsArgs) ([]db.GithubAccountConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListConnections")
	}

	var r0 []db.GithubAccountConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListGithubAccountConnectionsArgs) ([]db.GithubAccountConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ListGithubAccountConnectionsArgs) []db.GithubAccountConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GithubAccountConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListGithubAccountConnectionsArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnection provides a mock function with given fields: _a0
func (_m *MockIGithubAccountConnectionDao) UpdateConnection(_a0 types.UpdateGithubAccountConnectionArgs) (*db.GithubAccountConnectionModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnection")
	}

	var r0 *db.GithubAccountConnectionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateGithubAccountConnectionArgs) (*db.GithubAccountConnectionModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateGithubAccountConnectionArgs) *db.GithubAccountConnectionModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.GithubAccountConnectionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateGithubAccountConnectionArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIGithubAccountConnectionDao creates a new instance of MockIGithubAccountConnectionDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIGithubAccountConnectionDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIGithubAccountConnectionDao {
	mock := &MockIGithubAccountConnectionDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
