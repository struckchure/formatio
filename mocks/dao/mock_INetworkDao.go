// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockINetworkDao is an autogenerated mock type for the INetworkDao type
type MockINetworkDao struct {
	mock.Mock
}

// CreateNetwork provides a mock function with given fields: _a0
func (_m *MockINetworkDao) CreateNetwork(_a0 types.CreateNetworkArgs) (*db.NetworkModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetwork")
	}

	var r0 *db.NetworkModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateNetworkArgs) (*db.NetworkModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.CreateNetworkArgs) *db.NetworkModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NetworkModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateNetworkArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetwork provides a mock function with given fields: _a0
func (_m *MockINetworkDao) DeleteNetwork(_a0 types.DeleteNetworkArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteNetworkArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNetwork provides a mock function with given fields: _a0
func (_m *MockINetworkDao) GetNetwork(_a0 types.GetNetworkArgs) (*db.NetworkModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetNetwork")
	}

	var r0 *db.NetworkModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetNetworkArgs) (*db.NetworkModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetNetworkArgs) *db.NetworkModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NetworkModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetNetworkArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworks provides a mock function with given fields: _a0
func (_m *MockINetworkDao) ListNetworks(_a0 types.ListNetworksArgs) ([]db.NetworkModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworks")
	}

	var r0 []db.NetworkModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListNetworksArgs) ([]db.NetworkModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ListNetworksArgs) []db.NetworkModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.NetworkModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListNetworksArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetwork provides a mock function with given fields: _a0
func (_m *MockINetworkDao) UpdateNetwork(_a0 types.UpdateNetworkArgs) (*db.NetworkModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetwork")
	}

	var r0 *db.NetworkModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateNetworkArgs) (*db.NetworkModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateNetworkArgs) *db.NetworkModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NetworkModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateNetworkArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockINetworkDao creates a new instance of MockINetworkDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockINetworkDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockINetworkDao {
	mock := &MockINetworkDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
