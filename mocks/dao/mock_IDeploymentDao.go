// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIDeploymentDao is an autogenerated mock type for the IDeploymentDao type
type MockIDeploymentDao struct {
	mock.Mock
}

// CreateDeployment provides a mock function with given fields: _a0
func (_m *MockIDeploymentDao) CreateDeployment(_a0 types.CreateDeploymentArgs) (*db.DeploymentModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *db.DeploymentModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateDeploymentArgs) (*db.DeploymentModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.CreateDeploymentArgs) *db.DeploymentModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DeploymentModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateDeploymentArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: _a0
func (_m *MockIDeploymentDao) DeleteDeployment(_a0 types.DeleteDeploymentArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteDeploymentArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeployment provides a mock function with given fields: _a0
func (_m *MockIDeploymentDao) GetDeployment(_a0 types.GetDeploymentArgs) (*db.DeploymentModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *db.DeploymentModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetDeploymentArgs) (*db.DeploymentModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetDeploymentArgs) *db.DeploymentModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DeploymentModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetDeploymentArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: _a0
func (_m *MockIDeploymentDao) ListDeployments(_a0 types.ListDeploymentArgs) ([]db.DeploymentModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 []db.DeploymentModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListDeploymentArgs) ([]db.DeploymentModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ListDeploymentArgs) []db.DeploymentModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DeploymentModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListDeploymentArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployment provides a mock function with given fields: _a0
func (_m *MockIDeploymentDao) UpdateDeployment(_a0 types.UpdateDeploymentArgs) (*db.DeploymentModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployment")
	}

	var r0 *db.DeploymentModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateDeploymentArgs) (*db.DeploymentModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateDeploymentArgs) *db.DeploymentModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DeploymentModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateDeploymentArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIDeploymentDao creates a new instance of MockIDeploymentDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDeploymentDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDeploymentDao {
	mock := &MockIDeploymentDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
