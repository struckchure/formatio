// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "pkg.formatio/prisma/db"

	types "pkg.formatio/types"
)

// MockIDeploymentLogDao is an autogenerated mock type for the IDeploymentLogDao type
type MockIDeploymentLogDao struct {
	mock.Mock
}

// CreateLog provides a mock function with given fields: _a0
func (_m *MockIDeploymentLogDao) CreateLog(_a0 types.CreateDeploymentLogArgs) (*db.DeploymentLogModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateLog")
	}

	var r0 *db.DeploymentLogModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.CreateDeploymentLogArgs) (*db.DeploymentLogModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.CreateDeploymentLogArgs) *db.DeploymentLogModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DeploymentLogModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.CreateDeploymentLogArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLog provides a mock function with given fields: _a0
func (_m *MockIDeploymentLogDao) DeleteLog(_a0 types.DeleteDeploymentLogArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DeleteDeploymentLogArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Getlog provides a mock function with given fields: _a0
func (_m *MockIDeploymentLogDao) Getlog(_a0 types.GetDeploymentLogArgs) (*db.DeploymentLogModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Getlog")
	}

	var r0 *db.DeploymentLogModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.GetDeploymentLogArgs) (*db.DeploymentLogModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.GetDeploymentLogArgs) *db.DeploymentLogModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DeploymentLogModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.GetDeploymentLogArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLogs provides a mock function with given fields: _a0
func (_m *MockIDeploymentLogDao) ListLogs(_a0 types.ListDeploymentLogArgs) ([]db.DeploymentLogModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListLogs")
	}

	var r0 []db.DeploymentLogModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ListDeploymentLogArgs) ([]db.DeploymentLogModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ListDeploymentLogArgs) []db.DeploymentLogModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DeploymentLogModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ListDeploymentLogArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLog provides a mock function with given fields: _a0
func (_m *MockIDeploymentLogDao) UpdateLog(_a0 types.UpdateDeploymentLogArgs) (*db.DeploymentLogModel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLog")
	}

	var r0 *db.DeploymentLogModel
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UpdateDeploymentLogArgs) (*db.DeploymentLogModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.UpdateDeploymentLogArgs) *db.DeploymentLogModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DeploymentLogModel)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UpdateDeploymentLogArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIDeploymentLogDao creates a new instance of MockIDeploymentLogDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDeploymentLogDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDeploymentLogDao {
	mock := &MockIDeploymentLogDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
