// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"

	lib "pkg.formatio/lib"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockIContainerManager is an autogenerated mock type for the IContainerManager type
type MockIContainerManager struct {
	mock.Mock
}

// CreateContainer provides a mock function with given fields: _a0
func (_m *MockIContainerManager) CreateContainer(_a0 lib.CreateContainerArgs) (v1.Object, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainer")
	}

	var r0 v1.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(lib.CreateContainerArgs) (v1.Object, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(lib.CreateContainerArgs) v1.Object); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(lib.CreateContainerArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainer provides a mock function with given fields: _a0
func (_m *MockIContainerManager) DeleteContainer(_a0 lib.DeleteContainerArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(lib.DeleteContainerArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteCommandInContainer provides a mock function with given fields: _a0
func (_m *MockIContainerManager) ExecuteCommandInContainer(_a0 lib.ExecuteCommandInContainerArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommandInContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(lib.ExecuteCommandInContainerArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContainer provides a mock function with given fields: _a0
func (_m *MockIContainerManager) GetContainer(_a0 lib.GetContainerArgs) (*appsv1.Deployment, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetContainer")
	}

	var r0 *appsv1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(lib.GetContainerArgs) (*appsv1.Deployment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(lib.GetContainerArgs) *appsv1.Deployment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(lib.GetContainerArgs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainers provides a mock function with given fields:
func (_m *MockIContainerManager) ListContainers() ([]appsv1.Deployment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListContainers")
	}

	var r0 []appsv1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]appsv1.Deployment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []appsv1.Deployment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appsv1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentPods provides a mock function with given fields: deploymentName
func (_m *MockIContainerManager) ListDeploymentPods(deploymentName string) (*corev1.PodList, error) {
	ret := _m.Called(deploymentName)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentPods")
	}

	var r0 *corev1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.PodList, error)); ok {
		return rf(deploymentName)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.PodList); ok {
		r0 = rf(deploymentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainer provides a mock function with given fields: _a0
func (_m *MockIContainerManager) UpdateContainer(_a0 lib.UpdateContainerArgs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(lib.UpdateContainerArgs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIContainerManager creates a new instance of MockIContainerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIContainerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIContainerManager {
	mock := &MockIContainerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
