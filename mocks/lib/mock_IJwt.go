// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	lib "pkg.formatio/lib"

	mock "github.com/stretchr/testify/mock"
)

// MockIJwt is an autogenerated mock type for the IJwt type
type MockIJwt struct {
	mock.Mock
}

// GenerateJWT provides a mock function with given fields: sub
func (_m *MockIJwt) GenerateJWT(sub string) (*lib.AuthTokens, error) {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 *lib.AuthTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*lib.AuthTokens, error)); ok {
		return rf(sub)
	}
	if rf, ok := ret.Get(0).(func(string) *lib.AuthTokens); ok {
		r0 = rf(sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lib.AuthTokens)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyJWT provides a mock function with given fields: tokenString, jwtType
func (_m *MockIJwt) VerifyJWT(tokenString string, jwtType lib.JwtType) (*jwt.Token, error) {
	ret := _m.Called(tokenString, jwtType)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWT")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string, lib.JwtType) (*jwt.Token, error)); ok {
		return rf(tokenString, jwtType)
	}
	if rf, ok := ret.Get(0).(func(string, lib.JwtType) *jwt.Token); ok {
		r0 = rf(tokenString, jwtType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, lib.JwtType) error); ok {
		r1 = rf(tokenString, jwtType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIJwt creates a new instance of MockIJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIJwt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIJwt {
	mock := &MockIJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
