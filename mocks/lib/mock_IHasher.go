// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockIHasher is an autogenerated mock type for the IHasher type
type MockIHasher struct {
	mock.Mock
}

// HashPassword provides a mock function with given fields: password
func (_m *MockIHasher) HashPassword(password string) string {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PasswordIsCorrect provides a mock function with given fields: hashedPassword, password
func (_m *MockIHasher) PasswordIsCorrect(hashedPassword string, password string) bool {
	ret := _m.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for PasswordIsCorrect")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPassword, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockIHasher creates a new instance of MockIHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHasher {
	mock := &MockIHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
